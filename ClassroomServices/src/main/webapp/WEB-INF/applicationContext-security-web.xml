<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-3.1.xsd
       http://www.springframework.org/schema/security/oauth
       http://www.springframework.org/schema/security/spring-security-oauth-1.0.xsd">


	<sec:global-method-security
		pre-post-annotations="enabled">
		<sec:expression-handler ref="expressionHandler" />
	</sec:global-method-security>
	<sec:http pattern="/wadl.xml" security="none" />

	<sec:http disable-url-rewriting="true" entry-point-ref="forbiddenEntryPoint"
		use-expressions="true" create-session="never">
		<sec:anonymous enabled="false" />
		<sec:session-management
			session-fixation-protection="none" />
		<sec:custom-filter ref="standardOAuthFilters"
			before="FORM_LOGIN_FILTER" />
		<sec:custom-filter ref="restAuthenticationFilter"
			position="FORM_LOGIN_FILTER" />
		<sec:intercept-url pattern="/**" access="isFullyAuthenticated()" />
	</sec:http>

	<bean id="expressionHandler"
		class="com.abharana.services.web.security.permissions.expression.MethodSecurityExpressionHandler">
		<property name="permissionEvaluator" ref="permissionEvaluator" />
	</bean>

	<bean id="permissionEvaluator"
		class="com.abharana.services.web.security.permissions.PermissionEvaluator"></bean>
	<bean id="forbiddenEntryPoint"
		class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />

	<sec:authentication-manager alias="defaultAuthenticationManager"
		erase-credentials="true">
		<sec:authentication-provider ref="daoAuthenticationProvider" />
	</sec:authentication-manager>

	<bean id="daoAuthenticationProvider" class="com.abharana.services.web.security.RESTDaoAuthenticationProvider">
		<property name="userSecurityService" ref="userSecurityServiceImpl" />
	</bean>

	<bean id="passwordEncoder"
		class="com.abharana.services.web.security.authentication.algorithms.HMacShaPasswordEncoder">
		<constructor-arg name="strength" value="256" />
		<constructor-arg name="encodeHashAsBase64" value="true" />
	</bean>

	<bean name="jsonConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="objectMapper">
			<bean class="com.abharana.services.web.dto.mappers.JsonMapper" />
		</property>
	</bean>

	<bean name="jaxbConverter"
		class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter"></bean>

	<bean id="restAuthenticationFilter" class="com.abharana.services.web.security.http.RESTAuthenticationFilter">
		<constructor-arg name="defaultFilterProcessesUrl"
			value="/" />
		<property name="authenticationManager" ref="defaultAuthenticationManager" />
		<property name="authenticationSuccessHandler">
			<!-- Upon successful authentication, Spring will attempt to try and move 
				you to another URL -->
			<!-- We have to prevent this because the request for the resource and 
				the authentication all get done in the same request! -->
			<bean
				class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
				<property name="redirectStrategy">
					<bean class="com.abharana.services.web.security.http.NoRedirectStrategy" />
				</property>
			</bean>
		</property>
		<property name="authenticationFailureHandler">
			<bean
				class="com.abharana.services.web.security.http.RestAuthenticationFailureHandler">
				<property name="messageConverters">
					<list>
						<ref bean="jsonConverter" />
						<ref bean="jaxbConverter" />
					</list>
				</property>
			</bean>
		</property>
	</bean>

	<!-- SSO via OAuth 1.0 -->

	<bean id="standardOAuthFilters" class="com.abharana.services.web.security.http.sso.SSOCompositeFilter">
		<property name="filters">
			<list>
				<ref bean="oauthConsumerContextFilter" />
				<ref bean="oauthConsumerFilter" />
			</list>
		</property>
	</bean>

	<!-- START OF STANDARD OAUTH FILTERS -->
	<bean id="oauthConsumerContextFilter"
		class="org.springframework.security.oauth.consumer.filter.OAuthConsumerContextFilter">
		<property name="OAuthFailureHandler">
			<bean
				class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
				<property name="errorPage" value="/oauth_error.jsp" />
			</bean>
		</property>
		<property name="messageSource" ref="messageSource" />
		<property name="consumerSupport">
			<bean
				class="org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport">
				<property name="protectedResourceDetailsService" ref="resourceDetails" />
			</bean>
		</property>
	</bean>

	<bean id="oauthConsumerFilter"
		class="org.springframework.security.oauth.consumer.filter.OAuthConsumerProcessingFilter">
		<property name="requireAuthenticated" value="false" />
		<property name="protectedResourceDetailsService" ref="resourceDetails" />
		<property name="objectDefinitionSource">
			<bean
				class="org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource">
				<constructor-arg>
					<map>
						<entry>
							<key>
								<bean class="org.springframework.security.web.util.AnyRequestMatcher" />
							</key>
							<bean class="org.springframework.security.access.SecurityConfig">
								<constructor-arg value="oauthLoginProvider" />
							</bean>
						</entry>
					</map>
				</constructor-arg>
			</bean>
		</property>
		<property name="messageSource" ref="messageSource" />
	</bean>

	<oauth:resource-details-service  id="resourceDetails">
		<oauth:resource id="oauthLoginProvider" key="${web.security.sso.oauth10.key}"
			secret="${web.security.sso.oauth10.secret}" request-token-url="${web.security.sso.oauth10.requestTokenUrl}"
			user-authorization-url="${web.security.sso.oauth10.userAuthorizationUrl}"
			access-token-url="${web.security.sso.oauth10.accessTokenUrl}" />
	</oauth:resource-details-service>


</beans>